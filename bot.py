# -*- coding: utf-8 -*-
import telebot
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from telebot.apihelper import ApiException
from pymongo import MongoClient
import pyqiwi
import os

from random import randint, choice
from time import time, sleep
from datetime import datetime
import re
import math
import threading
from string import ascii_letters, digits

y=os.environ['qiwi']

# bot = telebot.TeleBot(os.environ['TELEGRAM_TOKEN'])
x=os.environ['shop']
my_username = bot.get_me().username
print('@'+my_username)
# client = os.environ['database'
z=os.environ['mongo']
db = MongoClient(client).DevelopingRoom_Bot

main_admin = 687806733
qiwi = '+380672038493'
percent_per_ref=1

start_ts = datetime(2018, 11, 3).timestamp()

generate_code = lambda: randint(100000, 999999)


def button(key):
    r = db.buttons.find_one({'key': key})   
    if r is not None:
        return r['text']
    print(f'''Not found {key} button''')
    d = {
        'buy': '–ö—É–ø–∏—Ç—å –±–æ—Ç–∞',
        'earn': '–ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å',
        'add_balance': '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
        'add_balance_confirm': '–Ø –ø–æ–Ω—è–ª!',
        'main_menu': 'üè°–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'cancel': '‚ùå–û—Ç–º–µ–Ω–∞',
        'balance': 'üí≥–ë–∞–ª–∞–Ω—Å',
        'stats': 'üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞',
        'admin': '‚öôÔ∏è–ê–¥–º–∏–Ω–∫–∞',
        'admin_edit_user': '–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
        'admin_post': '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É',
        'admin_watch_string': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç—Ä–æ–∫–∏',
        'admin_edit_string': '–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫–∏',
        'admin_watch_button': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–Ω–æ–ø–∫–∏',
        'admin_edit_button': '–ò–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏',
        'admin_watch_inline_button': '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏',
        'admin_edit_inline_button': '–ò–∑–º–µ–Ω–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏'
    }
    if key in d:
        return d[key]
    return key


def inline_button(key):
    r = db.inline_buttons.find_one({'key': key})
    if r is not None:
        return r['text']
    print(f'''Not found {key} inline button''')
    d = {
        'withdraw_balance': '–í—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏ {soon}',
        'add_balance': '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å',
        'add_balance_confirm': '–Ø –ø–æ–Ω—è–ª!',
        'cancel': '‚ùå–û—Ç–º–µ–Ω–∞',
        'order_bot': '–ó–∞–∫–∞–∑–∞—Ç—å —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞',
        'bots_list': '–°–ø–∏—Å–æ–∫ –±–æ—Ç–æ–≤',
        'back_to_bots_list': '–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É',
        'buy': '–ö—É–ø–∏—Ç—å'
    }
    if key in d:
        return d[key]
    return key


def string(key):
    r = db.strings.find_one({'key': key})
    if r is not None:
        return r['text']
    print(f'''Not found {key} string''')
    d = {
        'main_menu': '—Ç–µ–∫—Å—Ç –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é',
        'balance': '–ë–∞–ª–∞–Ω—Å: {0} —Ä—É–±.',
        'qiwi': '''–û—Ç–ø—Ä–∞–≤—å –Ω—É–∂–Ω–æ–µ –∫–æ–ª-–≤–æ –¥–µ–Ω–µ–≥ (–≤ —Ä—É–±–ª—è—Ö) –Ω–∞ –Ω–æ–º–µ—Ä <code>{0}</code>
–û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏ –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ <code>{1}</code> 
–ö–∞–∫ —Ç–æ–ª—å–∫–æ –º—ã –ø–æ–ª—É—á–∏–º —Ç–≤–æ–π –ø–ª–∞—Ç–µ–∂, —Ç–µ–±–µ –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ''',
        'not_enough': '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤: {0} –∏–∑ {1} —Ä—É–±.',
        'add_balance_confirmation': '–ü–æ–∫–∞ —á—Ç–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ QIWI. –ï—Å–ª–∏ —Ç–µ–±—è –≤—Å–µ —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –∏ —Ç—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É',
        'write_off': '–° –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—Å–∞–Ω–æ {0} —Ä—É–±.\n–û—Å—Ç–∞–ª–æ—Å—å {1} —Ä—É–±.',
        'replenishment': '–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {0} —Ä—É–±.\n–ù–∞ –±–∞–ª–∞–Ω—Å–µ {1} —Ä—É–±.',
        'ref_replenishment': '–ù–æ–≤–æ–µ –∑–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ—Ç <a href="tg://user?id={0}">{1}</a>, —Ä–µ—Ñ–µ—Ä–∞–ª–∞ {2} —É—Ä–æ–≤–Ω—è!',
        'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ!',
        'bot_not_found': '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω :(',
        'stats': '''üìä–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞:
üåê–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {0}
üì∫–í—Å–µ–≥–æ –±–æ—Ç–æ–≤: {1}
ü§ñ–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —Å–¥–µ–ª–æ–∫: {2}
–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {3} –¥.''',
        'unknown_input': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–≤–æ–¥, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑',
        'flood_text': '–ù–µ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞',
        'buy_text': '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –ª–∞ –ª–∞ –ª–∞',
        'bot_text': '''–ë–æ—Ç @{0}
–û–ø–∏—Å–∞–Ω–∏–µ: {1}
–Ø–∑—ã–∫: {2}
–¶–µ–Ω–∞: {3} —Ä—É–±.

–ë–∞–ª–∞–Ω—Å: {4} —Ä—É–±.''',
        'order_bot': '''–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —É –Ω–∞—Å –±–æ—Ç–∞ –¥–ª—è —Å–≤–æ–∏—Ö —Ü–µ–ª–µ–π. –í—Å–µ —É—Å–ª–æ–≤–∏—è –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ.
–ù–∞–ø–∏—à–∏ —Å—é–¥–∞ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞, –∏ —Å —Ç–æ–±–æ–π —Å–≤—è–∂–µ—Ç—Å—è @username''',
        'bot_order_success': '''–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!''',
        'bot_purchase_success': '''–ë–æ—Ç @{0} —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω.
–í –±–ª–∏–∂–∞–π—à–µ–º –≤—Ä–µ–º–µ–Ω–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è @username –∏ –ø–µ—Ä–µ–¥–∞—Å—Ç —Ñ–∞–π–ª''',
        'new_purchase': '''–ù–æ–≤–∞—è –ø–æ–∫—É–ø–∫–∞ –æ—Ç <a href="tg://user?id={0}">{1}</a>
–°—É–º–º–∞: {2} —Ä—É–±.
–ë–æ—Ç: @{3}''',
        'new_order': '''–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç <a href="tg://user?id={0}">{1}</a>
–¢–µ–∫—Å—Ç:
{2}''',
        'earn': '''–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –ø–æ —Å–≤–æ–µ–π —Å—Å—ã–ª–∫–µ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ!
–í—ã –ø–æ–ª—É—á–∏—Ç–µ {0}% —Å –∫–∞–∂–¥–æ–π –ø–æ–∫—É–ø–∫–∏ —Å–≤–æ–∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤, –∞ —Ç–∞–∫–∂–µ –∏—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ (–¥–æ 5 —É—Ä–æ–≤–Ω–µ–π!)

–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º —ç—Ç—É —Å—Å—ã–ª–∫—É:''',
        'withdraw_balance_num': '–í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –¥–µ–Ω—å–≥–∏',
        'withdraw_balance_sum': '''–í–≤–µ–¥–∏ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏\n–í–∞—à –±–∞–ª–∞–Ω—Å: {0} —Ä—É–±.''',
        'wrong_data': '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
        'withdraw_comment': '–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç @{0}'
    }
    if key in d:
        return d[key]
    return key

def main_menu_kb(admin):
    main_menu = [
        [button('buy')],
        [button('balance'), button('stats')],
        [button('earn')]
    ]
    return parse_kb(main_menu if not admin else main_menu+[[button('admin')]])


def is_main_admin(uid):
    return uid == main_admin


def parse_kb(b):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for i in range(len(b)):
        kb.add(*[types.KeyboardButton(j) for j in b[i]])
    return kb


def parse_inline_kb(b):
    kb = InlineKeyboardMarkup()
    for i in range(len(b)):
        kb.add(*[(
            InlineKeyboardButton(inline_button(j), callback_data=j) if type(j) == str
            else InlineKeyboardButton(j[0], callback_data=j[1])
        ) for j in b[i]])
    return kb


# def pagination_kb_cb(type, p, total_pages):
#     return f"page_{type}_{p}" if (0 < p <= total_pages) else 'none'
#
#
# def pagination_kb(type, page, total_pages):
#     kb = InlineKeyboardMarkup()
#     kb.add(
#         InlineKeyboardButton("‚Äπ", callback_data=pagination_kb_cb(type, page-1, total_pages)),
#         InlineKeyboardButton(f'{page}/{total_pages}', callback_data="none"),
#         InlineKeyboardButton("‚Ä∫", callback_data=pagination_kb_cb(type, page+1, total_pages)))
#     return kb


def admin_kb():
    return parse_kb([[button('admin_edit_user')],
                     [button('admin_edit_bot')],
                     [button('admin_post')],
                     [button('admin_watch_string'), button('admin_edit_string')],
                     [button('admin_watch_button'), button('admin_edit_button')],
                     [button('admin_watch_inline_button'), button('admin_edit_inline_button')],
                     [button('main_menu')]])


def admin_user_kb(u):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å', callback_data=f'''user_{u['id']}_edit_balance'''))
    kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data=f'''user_{u['id']}_delete'''))
    kb.add(InlineKeyboardButton('‚úÖ –ê–¥–º–∏–Ω' if u['is_admin'] else '‚õî –ù–µ –∞–¥–º–∏–Ω',
                                callback_data=f'''user_{u['id']}_admin_{0 if u['is_admin'] else 1}'''))
    return kb


def admin_bot_kb(u):
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å –±–æ—Ç–∞', callback_data=f'''admin_bot_"{u['username']}"_delete'''))
    kb.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ',
                                callback_data=f'''admin_bot_"{u['username']}"_edit_desc'''))
    kb.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫',
                                callback_data=f'''admin_bot_"{u['username']}"_edit_price'''))
    kb.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É',
                                callback_data=f'''admin_bot_"{u['username']}"_edit_price'''))
    kb.add(InlineKeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ',
                                callback_data=f'''admin_bot_"{u['username']}"_edit_title'''))
    return kb


def admin_user_text(u):
    text = u['name']
    if u['username']:
        text += f''' (@{u['username']})\n'''
    text += f'''–ë–∞–ª–∞–Ω—Å: {u['balance']} —Ä—É–±.'''
    return text


def admin_bot_text(u):
    return f'''–ë–æ—Ç {u['username']}
–û–ø–∏—Å–∞–Ω–∏–µ: {u['desc']}
–Ø–∑—ã–∫: {u['lang']}
–¶–µ–Ω–∞: {u['price']} —Ä—É–±.
–ù–∞–∑–≤–∞–Ω–∏–µ (–∫–Ω–æ–ø–∫–∞ –≤ —Å–ø–∏—Å–∫–µ –±–æ—Ç–æ–≤) {u['title']}'''


@bot.message_handler()
def message_handler(m):
    user = db.users.find_one({'id': m.from_user.id})
    if user is None:
        referrer_id = -1
        match = re.search(r'^/start ([a-zA-Z0-9]{7})$', m.text)
        if match:
            referrer = db.users.find_one({'invite_id': match.group(1)})
            if referrer:
                referrer_id = referrer['id']
        db.users.insert_one({
            'id': m.from_user.id,
            'name': m.from_user.first_name,
            'username': m.from_user.username,
            'is_admin': is_main_admin(m.from_user.id),
            'balance': 0,
            'last_message': -1,
            'mode': 'none',
            'mode_param': 'none',
            'invite_id': ''.join(choice(ascii_letters+digits) for _ in range(7)),
            'referrer': referrer_id
        })
        user = db.users.find_one({'id': m.from_user.id})
    if time() - user['last_message'] < 0.5:
        return bot.send_message(m.from_user.id, string('flood_text'))
    db.users.update_one({'id': m.from_user.id}, {'$set': {'name': m.from_user.first_name,
                                                          'username': m.from_user.username,
                                                          'last_message': time()}})
    user = db.users.find_one({'id': m.from_user.id})

    if m.text == button('cancel'):
        db.users.update_one({'id': user['id']}, {'$set': {'mode': 'none'}})
        bot.send_message(m.from_user.id, string('cancelled'), reply_markup=main_menu_kb(user['is_admin']))
    elif m.text == button('main_menu') or m.text.startswith('/start'):
        db.users.update_one({'id': user['id']}, {'$set': {'mode': 'none'}})
        bot.send_message(m.from_user.id, string('main_menu'), reply_markup=main_menu_kb(user['is_admin']))
    elif m.text == button('balance'):
        bot.send_message(
            m.from_user.id,
            string('balance').format(user['balance']),
            reply_markup=parse_inline_kb([['add_balance'],
                                          ['withdraw_balance']]))
    # elif m.text == button('add_balance'):
    #     bot.send_message(
    #         m.from_user.id,
    #         string('add_balance_confirmation'),
    #         reply_markup=parse_kb([[button('add_balance_confirm')], [button('main_menu')]]),
    #         parse_mode='HTML')
    # elif m.text == button('add_balance_confirm'):
    #     code = generate_code()
    #     db.payments.insert_one({
    #         'id': m.from_user.id,
    #         'code': code,
    #         'ts': time(),
    #         'completion_ts': None,
    #         'completed': False,
    #         'txn_id': -1
    #     })
    #     bot.send_message(m.from_user.id,
    #                      string('qiwi').format(qiwi, code),
    #                      reply_markup=parse_kb([[button('main_menu')]]),
    #                      parse_mode='HTML')
    # elif m.text == button('add'):
    #     db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'adding'}})
    #     bot.send_message(m.from_user.id,
    #                      string('add').format(channel_add_cost, bot_add_cost, user['balance']),
    #                      reply_markup=parse_kb([[button('add_channel'), button('add_bot')],
    #                                             [button('cancel')]]))
    #     # if user['balance'] < add_cost:
    #     #     return bot.send_message(m.from_user.id,
    #     #                             string('not_enough').format(user['balance'], add_cost),
    #     #                             reply_markup=parse_kb([[button('add_balance')], [button('main_menu')]]))
    # elif m.text == button('channels'):
    #     c = [*db.channels.find({})]
    #     if len(c) == 0:
    #         return bot.send_message(m.from_user.id, string('no_channels'))
    #     items = c[0:items_per_page]
    #     bot.send_message(m.from_user.id,
    #                      '\n\n'.join(channel_text(channel) for channel in items),
    #                      reply_markup=pagination_kb('channels', 1, math.ceil(len(c)/items_per_page)))
    # elif m.text == button('bots'):
    #     b = [*db.bots.find({})]
    #     if len(b) == 0:
    #         return bot.send_message(m.from_user.id, string('no_bots'))
    #     items = b[0:items_per_page]
    #     bot.send_message(m.from_user.id,
    #                      '\n\n'.join(bot_text(bot) for bot in items),
    #                      reply_markup=pagination_kb('bots', 1, math.ceil(len(b)/items_per_page)))
    elif m.text == button('stats'):
        b = len([*db.bots.find()])
        u = len([*db.users.find()])
        t = len([*db.purchases.find()])
        bot.send_message(
            m.from_user.id,
            string('stats').format(u, b, t, math.ceil((time()-start_ts)/86400)))
    elif m.text == button('buy'):
        bot.send_message(m.from_user.id,
                         string('buy_text'),
                         reply_markup=parse_inline_kb([['order_bot'], ['bots_list']]))
    elif m.text == button('earn'):
        bot.send_message(
            m.from_user.id,
            string('earn').format(percent_per_ref))
        bot.send_message(m.from_user.id, f'''t.me/{my_username}?start={user['invite_id']}''')
    elif m.text == button('admin'):
        if not user['is_admin']:
            return
        bot.send_message(m.from_user.id,
                         button('admin'),
                         reply_markup=admin_kb())
    elif m.text == button('admin_edit_user'):
        if not user['is_admin']:
            return
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_choosing_user'}})
        bot.send_message(m.from_user.id,
                         '–í–≤–µ–¥–∏ id –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
                         reply_markup=parse_kb([[button('cancel')]]))
    elif m.text == button('admin_edit_bot'):
        if not user['is_admin']:
            return
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_choosing_bot'}})
        bot.send_message(m.from_user.id,
                         '–í–≤–µ–¥–∏ —é–∑–µ—Ä–Ω–µ–π–º –±–æ—Ç–∞',
                         reply_markup=parse_kb([[button('cancel')]]))
    elif m.text == button('admin_post'):
        if not user['is_admin']:
            return
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_posting'}})
        bot.send_message(m.from_user.id,
                         '–í–≤–µ–¥–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTML.',
                         reply_markup=parse_kb([[button('cancel')]]))
    elif m.text == button('admin_edit_string'):
        if not user['is_admin']:
            return
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_edit_string_choosing'}})
        s = [*db.strings.find()]
        bot.send_message(m.from_user.id,
                         '–í–≤–µ–¥–∏ –∫–ª—é—á —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.',
                         reply_markup=parse_kb([[k['key']] for k in s]+[[button('cancel')]]))
    elif m.text == button('admin_edit_button'):
        if not user['is_admin']:
            return
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_edit_button_choosing'}})
        s = [*db.buttons.find()]
        bot.send_message(m.from_user.id,
                         '–í–≤–µ–¥–∏ –∫–ª—é—á –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.',
                         reply_markup=parse_kb([[k['key']] for k in s]+[[button('cancel')]]))
    elif m.text == button('admin_edit_inline_button'):
        if not user['is_admin']:
            return
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_edit_inline_button_choosing'}})
        s = [*db.inline_buttons.find()]
        bot.send_message(m.from_user.id,
                         '–í–≤–µ–¥–∏ –∫–ª—é—á –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.',
                         reply_markup=parse_kb([[k['key']] for k in s]+[[button('cancel')]]))
    elif m.text == button('admin_watch_string'):
        if not user['is_admin']:
            return
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_watching_string'}})
        s = [*db.strings.find()]
        bot.send_message(m.from_user.id,
                         '–í–≤–µ–¥–∏ –∫–ª—é—á —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.',
                         reply_markup=parse_kb([[k['key']] for k in s]+[[button('cancel')]]))
    elif m.text == button('admin_watch_button'):
        if not user['is_admin']:
            return
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_watching_button'}})
        s = [*db.inline_buttons.find()]
        bot.send_message(m.from_user.id,
                         '–í–≤–µ–¥–∏ –∫–ª—é—á –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.',
                         reply_markup=parse_kb([[k['key']] for k in s]+[[button('cancel')]]))
    elif m.text == button('admin_watch_inline_button'):
        if not user['is_admin']:
            return
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_watching_inline_button'}})
        s = [*db.inline_buttons.find()]
        bot.send_message(m.from_user.id,
                         '–í–≤–µ–¥–∏ –∫–ª—é—á –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö.',
                         reply_markup=parse_kb([[k['key']] for k in s]+[[button('cancel')]]))
    elif re.search(r'/add (.+)\n(.+)\n(.+)\n(\d+)\n(.+)', m.text):
        if not user['is_admin']:
            return
        [title, desc, lang, price, username] = re.search(r'/add (.+)\n(.+)\n(.+)\n(\d+)\n(.+)', m.text).groups()
        db.bots.insert_one({
            'username': username,
            'title': title,
            'lang': lang,
            'price': int(price),
            'desc': desc
        })
        bot.send_message(m.from_user.id, f'''–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!''', reply_markup=parse_inline_kb([['bots_list']]))

    elif user['mode'] == 'withdraw_balance_waiting_num':
        num = re.sub(r'[\+\(\)\- ]', '', m.text)
        db.users.update_one({'id': user['id']}, {'$set': {'mode': 'withdraw_balance_waiting_sum',
                                                          'mode_param': num}})
        bot.send_message(m.from_user.id, string('withdraw_balance_sum').format(user['balance']), reply_markup=parse_kb([[button('cancel')]]))
    elif user['mode'] == 'withdraw_balance_waiting_sum':
        match = re.search(r'\d+\.?\d*', re.sub(r',', '.', m.text))
        if match is None:
            return bot.send_message(m.from_user.id, string('wrong_data'))
        sum = float(match.group(0))
        if sum > user['balance']:
            return bot.send_message(m.from_user.id, string('wrong_data'))
        print(wallet.send(pid="99", recipient='+79636424423', amount=1.11, comment='–ü—Ä–∏–≤–µ—Ç!'))
        # print(wallet.send(99, recipient=user['mode_param'], amount=sum, comment=string('withdraw_comment').format(my_username)))
        db.users.update_one({'id': user['id']}, {'$set': {'mode': 'none'}})
    elif user['mode'] == 'ordering_bot':
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'none'}})
        bot.send_message(m.from_user.id, string('bot_order_success'), reply_markup=main_menu_kb(user['is_admin']))
        bot.send_message(main_admin, string('new_order').format(m.from_user.id,
                                                                m.from_user.first_name,
                                                                m.text),
                         parse_mode='HTML')
    elif user['mode'] == 'admin_choosing_user':
        match1 = re.search(r'^\d+$', m.text)
        match2 = re.search(r'@([A-Za-z0-9_]{5,})', m.text)
        if match1 is None and match2 is None:
            return bot.send_message(m.from_user.id, string('wrong_data'))
        u = db.users.find_one({'id': int(match1.group(0))} if match1 is not None else {'username': match2.group(1)})
        if u is None:
            return bot.send_message(m.from_user.id, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω')
        bot.send_message(m.from_user.id, admin_user_text(u), reply_markup=admin_user_kb(u))
        print(u)
        pass
    elif user['mode'] == 'admin_choosing_bot':
        match = re.search(r'@([A-Za-z0-9_]{5,})', m.text)
        if match is None:
            return bot.send_message(m.from_user.id, string('wrong_data'))
        u = db.bots.find_one({'username': match.group(1)})
        if u is None:
            return bot.send_message(m.from_user.id, '–ë–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')
        bot.send_message(m.from_user.id, admin_bot_text(u), reply_markup=admin_bot_kb(u))
        print(u)
        pass
    elif user['mode'] == 'admin_editing_balance':
        match = re.search(r'^\d+$', m.text)
        if match is None:
            return bot.send_message(m.from_user.id, '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç')
        amount = int(match[0])
        db.users.update_one({'id': user['mode_param']}, {'$set': {'balance': amount}})
        u = db.users.find_one({'id': user['mode_param']})
        bot.send_message(m.from_user.id, admin_user_text(u), reply_markup=admin_user_kb(u))
    elif user['mode'] == 'admin_posting':
        all_users = [*db.users.find()]
        n = 0
        db.users.update_one({'id': user['id']}, {'$set': {'mode': 'none'}})
        for u in all_users:
            print(u)
            try:
                bot.send_message(u['id'], m.text, parse_mode='HTML')
                n += 1
            except ApiException as e:
                print(e)
        db.posts.insert_one({'id': m.from_user.id, 'text': m.text, 'ts': time(), 'n_sent': n})
        bot.send_message(m.from_user.id,
                         f'–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {n} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º',
                         reply_markup=admin_kb())
    elif user['mode'] == 'admin_edit_string_choosing':
        key = m.text
        s = db.strings.find_one({'key': key})
        if s is None:
            return bot.send_message(m.from_user.id, '–°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_edit_string_editing',
                                                              'mode_param': key}})
        bot.send_message(m.from_user.id,
                         f'''–í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n\n{s['text']}''',
                         reply_markup=parse_kb([[button('cancel')]]),
                         parse_mode='HTML')
    elif user['mode'] == 'admin_edit_string_editing':
        val = m.text
        key = user['mode_param']
        s = db.strings.find_one({'key': key})
        if s is None:
            return bot.send_message(m.from_user.id, '–°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'none'}})
        db.strings.update_one({'key': key}, {'$set': {'text': val}})
        bot.send_message(m.from_user.id,
                         f'''–ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ {key} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ''',
                         reply_markup=admin_kb())
    elif user['mode'] == 'admin_edit_button_choosing':
        key = m.text
        s = db.buttons.find_one({'key': key})
        if s is None:
            return bot.send_message(m.from_user.id, '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_edit_button_editing',
                                                              'mode_param': key}})
        bot.send_message(m.from_user.id,
                         f'''–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n\n{s['text']}''',
                         reply_markup=parse_kb([[button('cancel')]]),
                         parse_mode='HTML')
    elif user['mode'] == 'admin_edit_button_editing':
        val = m.text
        key = user['mode_param']
        s = db.buttons.find_one({'key': key})
        if s is None:
            return bot.send_message(m.from_user.id, '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'none'}})
        db.buttons.update_one({'key': key}, {'$set': {'text': val}})
        bot.send_message(m.from_user.id,
                         f'''–ó–Ω–∞—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ {key} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ''',
                         reply_markup=admin_kb())
    elif user['mode'] == 'admin_edit_inline_button_choosing':
        key = m.text
        s = db.inline_buttons.find_one({'key': key})
        if s is None:
            return bot.send_message(m.from_user.id, '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'admin_edit_inline_button_editing',
                                                              'mode_param': key}})
        bot.send_message(m.from_user.id,
                         f'''–í–≤–µ–¥–∏ –Ω–æ–≤—É—é –∫–Ω–æ–ø–∫—É. –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:\n\n{s['text']}''',
                         reply_markup=parse_kb([[button('cancel')]]),
                         parse_mode='HTML')
    elif user['mode'] == 'admin_edit_inline_button_editing':
        val = m.text
        key = user['mode_param']
        s = db.inline_buttons.find_one({'key': key})
        if s is None:
            return bot.send_message(m.from_user.id, '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        db.users.update_one({'id': m.from_user.id}, {'$set': {'mode': 'none'}})
        db.inline_buttons.update_one({'key': key}, {'$set': {'text': val}})
        bot.send_message(m.from_user.id,
                         f'''–ó–Ω–∞—á–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ {key} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ''',
                         reply_markup=admin_kb())
    elif user['mode'] == 'admin_watching_string':
        key = m.text
        s = db.strings.find_one({'key': key})
        if s is None:
            return bot.send_message(m.from_user.id, '–°—Ç—Ä–æ–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        bot.send_message(m.from_user.id,
                         s['text'],
                         parse_mode='HTML')
    elif user['mode'] == 'admin_watching_button':
        key = m.text
        s = db.buttons.find_one({'key': key})
        if s is None:
            return bot.send_message(m.from_user.id, '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        bot.send_message(m.from_user.id,
                         s['text'],
                         parse_mode='HTML')
    elif user['mode'] == 'admin_watching_inline_button':
        key = m.text
        s = db.inline_buttons.find_one({'key': key})
        if s is None:
            return bot.send_message(m.from_user.id, '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.')
        bot.send_message(m.from_user.id,
                         s['text'],
                         parse_mode='HTML')
    elif re.search(r'admin_bot_editing_(.+)', user['mode']):
        b = db.bots.find_one({'username': user['mode_param']})
        if b is None:
            return bot.send_message(m.from_user.id, string('bot_not_found'))
        [field] = re.search(r'admin_bot_editing_(.+)', user['mode']).groups()
        if field == 'price':
            try:
                val = int(m.text)
            except:
                return bot.send_message(m.from_user.id, string('wrong_data'))
        else:
            val = m.text
        db.bots.update_one({'username': user['mode_param']}, {'$set': {field: val}})
        bot.send_message(m.from_user.id, 'ok')
    else:
        db.users.update_one({'id': user['id']}, {'$set': {'mode': 'none'}})
        bot.send_message(m.from_user.id,
                         string('unknown_input'),
                         reply_markup=main_menu_kb(user['is_admin']))


@bot.callback_query_handler(lambda call: call.data == 'none')
def none_callback(call):
    bot.answer_callback_query(call.id, "")


# @bot.callback_query_handler(func=lambda call: re.search(r'page_(.+?)_(\d+)', call.data))
# def page_callback(call):
#     [type, page] = re.search(r'page_(.+?)_(\d+)', call.data).groups()
#     page = int(page)
#     if type == 'channels':
#         c = [*db.channels.find({})]
#         if len(c) == 0:
#             return bot.edit_message_text(string('no_channels'), call.from_user.id, call.message.message_id)
#         items = c[items_per_page*(page-1):items_per_page*page]
#         bot.edit_message_text('\n\n'.join(channel_text(channel) for channel in items),
#                               call.from_user.id,
#                               call.message.message_id,
#                               reply_markup=pagination_kb('channels', page, math.ceil(len(c)/items_per_page)))
#     elif type == 'bots':
#         b = [*db.bots.find({})]
#         if len(b) == 0:
#             return bot.edit_message_text(string('no_bots'), call.from_user.id, call.message.message_id)
#         items = b[items_per_page*(page-1):items_per_page*page]
#         bot.edit_message_text('\n\n'.join(bot_text(bot) for bot in items),
#                               call.from_user.id,
#                               call.message.message_id,
#                               reply_markup=pagination_kb('bots', page, math.ceil(len(b)/items_per_page)))
#     bot.answer_callback_query(call.id, "")


@bot.callback_query_handler(func=lambda call: re.search(r'user_(\d+?)_(.+)', call.data))
def user_callback(call):
    [uid, data] = re.search(r'user_(\d+?)_(.+)', call.data).groups()
    uid = int(uid)
    u = db.users.find_one({'id': uid})
    if u is None:
        return bot.edit_message_reply_markup(call.from_user.id, call.message.message_id)
    if data == 'delete':
        db.users.delete_one({'id': uid})
        bot.edit_message_text('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {0} —É–¥–∞–ª–µ–Ω.'.format(u['name']),
                              call.from_user.id,
                              call.message.message_id)
    elif data == 'edit_balance':
        db.users.update_one({'id': call.from_user.id}, {'$set': {'mode': 'admin_editing_balance', 'mode_param': uid}})
        bot.edit_message_text(admin_user_text(u)+'\n\n –í–≤–µ–¥–∏ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å:',
                              call.from_user.id,
                              call.message.message_id)
    elif re.search(r'admin_\d', data):
        val = re.search(r'admin_(\d)', data).group(1)
        db.users.update_one({'id': uid}, {'$set': {'is_admin': bool(int(val))}})
        u = db.users.find_one({'id': uid})
        bot.edit_message_reply_markup(call.from_user.id, call.message.message_id, reply_markup=admin_user_kb(u))
    bot.answer_callback_query(call.id, "")


@bot.callback_query_handler(func=lambda call: re.search(r'^admin_bot_"(.+?)"_(.+)$', call.data))
def user_callback(call):
    [username, action] = re.search(r'admin_bot_"(.+?)"_(.+)', call.data).groups()
    print(username)
    user = db.users.find_one({'id': call.from_user.id})
    b = db.bots.find_one({'username': username})
    if b is None:
        return bot.answer_callback_query(call.id, string('bot_not_found'))
    bot.answer_callback_query(call.id, "")
    if action == 'delete':
        db.bots.delete_one({'username': username})
        return bot.edit_message_text('deleted',call.from_user.id, call.message.message_id)
    field = re.search(r'edit_(.+)', action).group(1)
    db.users.update_one({'id': call.from_user.id}, {'$set': {'mode': 'admin_bot_editing_'+field,
                                                             'mode_param': username}})
    bot.edit_message_reply_markup(call.from_user.id, call.message.message_id)
    bot.send_message(call.from_user.id, '–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ')


@bot.callback_query_handler(func=lambda call: re.search(r'^bot_(.+)$', call.data))
def user_callback(call):
    [username] = re.search(r'bot_(.+)', call.data).groups()
    user = db.users.find_one({'id': call.from_user.id})
    b = db.bots.find_one({'username': username})
    if b is None:
        return bot.answer_callback_query(call.id, string('bot_not_found'))
    bot.answer_callback_query(call.id, "")
    bot.edit_message_text(string('bot_text').format(b['username'], b['desc'], b['lang'], b['price'], user['balance']),
                          call.from_user.id, call.message.message_id,
                          reply_markup=parse_inline_kb([
                              [(string('buy'), f'buy_{username}') if (user['balance'] >= b['price']) else (inline_button('not_enough_money'), 'none')],
                              ['back_to_bots_list']]),
                          parse_mode='HTML')


@bot.callback_query_handler(func=lambda call: re.search(r'^buy_(.+)$', call.data))
def user_callback(call):
    [username] = re.search(r'buy_(.+)', call.data).groups()
    user = db.users.find_one({'id': call.from_user.id})
    b = db.bots.find_one({'username': username})
    if b is None:
        return bot.answer_callback_query(call.id, string('bot_not_found'))
    bot.answer_callback_query(call.id, "")
    if user['balance'] < b['price']:
        return bot.edit_message_text(string('not_enough_money'),
                                     call.from_user.id, call.message.message_id)
    db.users.update_one({'id': call.from_user.id}, {'$inc': {'balance': -b['price']}})
    db.purchases.insert_one({
        'ts': time(),
        'username': b['username'],
        'price': b['price'],
        'id': call.from_user.id
    })
    user = db.users.find_one({'id': call.from_user.id})
    bot.send_message(call.from_user.id,
                     string('write_off').format(b['price'], user['balance']),
                     reply_markup=main_menu_kb(user['is_admin']))
    bot.edit_message_text(string('bot_purchase_success').format(b['username']),
                          call.from_user.id, call.message.message_id)
    bot.send_message(main_admin, string('new_purchase').format(call.from_user.id,
                                                               call.from_user.first_name,
                                                               b['price'],
                                                               b['username']),
                     parse_mode='HTML')

    r_id = user['referrer']
    sum = b['price']*percent_per_ref/100
    for i in range(5):
        referrer = db.users.find_one({'id': r_id})
        if referrer is None:
            return
        db.users.update_one({'id': r_id}, {'$inc': {'balance': sum}})
        referrer = db.users.find_one({'id': r_id})

        bot.send_message(r_id,
                         string('ref_replenishment').format(user['id'], user['name'], i+1),
                         parse_mode='HTML')
        bot.send_message(r_id,
                         string('replenishment').format(sum, referrer['balance']),
                         reply_markup=main_menu_kb(user['is_admin']))
        db.ref_replenishments.insert_one({
            'ts': time(),
            'level': i+1,
            'id': referrer['id']
        })
        r_id = referrer['referrer']


@bot.callback_query_handler(func=lambda x:x)
def callback_query_callback(call):
    user = db.users.find_one({'id': call.from_user.id})
    data = call.data
    if data == 'cancel':
        db.users.update_one({'id': user['id']}, {'$set': {'mode': 'none'}})
        bot.edit_message_text(string('cancelled'), call.from_user.id, call.message.message_id)
    elif data == 'bots_list' or data == 'back_to_bots_list':
        bots = [*db.bots.find()]
        kb = []
        arr = []
        for b in bots:
            arr.append((b['title'], 'bot_'+b['username']))
            if len(arr) == 1:
                kb += [arr]
                arr = []
        kb += [arr]
        print(kb)
        bot.edit_message_text(string('buy_text'), call.from_user.id, call.message.message_id,
                              reply_markup=parse_inline_kb(kb))
    elif data == 'add_balance':
        bot.edit_message_text(
            string('add_balance_confirmation'),
            call.from_user.id, call.message.message_id,
            reply_markup=parse_inline_kb([['add_balance_confirm'], ['cancel']]),
            parse_mode='HTML')
    elif data == 'add_balance_confirm':
        code = generate_code()
        db.payments.insert_one({
            'id': call.from_user.id,
            'code': code,
            'ts': time(),
            'completion_ts': None,
            'completed': False,
            'txn_id': -1
        })
        bot.edit_message_text(
            string('qiwi').format(qiwi, code),
            call.from_user.id, call.message.message_id,
            parse_mode='HTML')
        # bot.send_message(call.from_user.id, string('main_menu'), reply_markup=main_menu_kb(user['is_admin']))
    elif data == 'order_bot':
        db.users.update_one({'id': call.from_user.id}, {'$set': {'mode': 'ordering_bot'}})
        bot.edit_message_text(
            string('order_bot'),
            call.from_user.id, call.message.message_id,
            reply_markup=parse_inline_kb([['cancel']]),
            parse_mode='HTML')
    elif data == 'withdraw_balance':
        db.users.update_one({'id': user['id']}, {'$set': {'mode': 'withdraw_balance_waiting_num'}})
        bot.edit_message_text(
            string('withdraw_balance_num'),
            call.from_user.id, call.message.message_id,
            reply_markup=parse_inline_kb([['cancel']]))

    bot.answer_callback_query(call.id, "")


def check_qiwi():
    while True:
        print(wallet.balance())
        history = wallet.history(20, 'IN')
        for t in history['transactions']:
            if t.status != 'SUCCESS':
                continue
            if t.comment is None:
                continue
            if t.sum.currency != 643:
                continue
            if db.payments.find_one({'txn_id': t.txn_id}):
                continue

            code = re.search(r'\d+', t.comment)
            if code is None:
                continue
            code = int(code[0])

            payment = db.payments.find_one({'code': code, 'completed': False})
            if not payment:
                continue
            db.payments.update(
                {
                    'code': code,
                    'completed': False
                },
                {'$set': {
                    'completed': True,
                    'completion_ts': time(),
                    'txn_id': t.txn_id
                }})
            amount = t.sum.amount
            db.users.update_one({'id': payment['id']}, {'$inc': {'balance': amount}})
            user = db.users.find_one({'id': payment['id']})
            bot.send_message(payment['id'],
                             string('replenishment').format(amount, user['balance']),
                             reply_markup=main_menu_kb(user['is_admin']))
        sleep(300)

if True:
    print('bot is working')
    t2 = threading.Thread(target=lambda: bot.polling(none_stop=True, timeout=600))
    t2.start()
    t1 = threading.Thread(target=check_qiwi())
    t1.start()


